<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8" />
    <title>Pesquisa de todas as pessoas no sistema</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="https://dl.dropbox.com/scl/fi/r2a1ld2xtkxkdfc8dlsr5/tool.png?rlkey=schd5t3as8tzf71ld5dj07972&st=p6pfvznp&dl=0" type="image/jpg">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Adicionando a biblioteca SheetJS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        /* Scrollbar para navegadores WebKit */
        ::-webkit-scrollbar {
          width: 32px;
        }

        ::-webkit-scrollbar-track {
          background: #eee;
          border-left:1px solid #111;
        }

        ::-webkit-scrollbar-thumb {
          background-color: #555;
        }

        ::-webkit-scrollbar-thumb:hover {
          background: #333;
        }

        /* Scrollbar para Firefox */
        body {
          scrollbar-width: thin;
          scrollbar-color: #555 #eee;
        }
        input[type="file"] { margin-bottom: 10px; }
        ul { list-style-type: none; padding-left: 0; }
        li { padding: 5px 0; border-bottom: 1px solid #ccc; }
        #upload {
            display: none; /* Esconde o input padr√£o */
        }

        .upload-label {
            display: inline-block;
            background-color: #007bff;
            color: white;
            padding: 10px 15px;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
        }

        .upload-label:hover {
            background-color: #0056b3;
        }

        .search-input {
            padding: 10px 15px;
            font-size: 16px;
            border: 2px solid #ccc;
            border-radius: 25px;
            outline: none;
            transition: 0.3s;
            box-sizing: border-box;
            width: 100%;
            height: 40px; /* Garante que a altura seja fixa para alinhamento */
        }

        .search-input:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0,123,255,0.4);
        }
        #department-filter {
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        #department-filter label {
            margin-left: 0;
            margin-right: 0;
        }
        .voltar-tela-inicial {
            display: flex;
            flex-direction: row;
            position: fixed;
            top: 0px;
            left: 0px;
            right:0;
            display: flex;
            flex-direction: row;
            gap: 10px;
            z-index: 999;
            flex-wrap: wrap; /* Para permitir quebra de linha */
            background:#222;
            padding:10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            justify-content: center;
        }

        /* Estilo base compartilhado entre os bot√µes */
        .voltar-tela-inicial button {
            width: 50px;
            height: 50px;
            background: #eee;
            border: 2px solid #000;
            font-size: 24px;
            cursor: pointer;
            border-radius: 50%;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            display: flex;
            justify-content: center;
            align-items: center;
            color: black;
        }
        .hidden {
            display: none !important;
        }
    </style>
</head>
<body>
<div class="voltar-tela-inicial">
   <button onclick="window.location.href='https://armandodecampos.github.io/Ferramentas-Trabalho/'">
      <i class="fas fa-home"></i>
    </button>
</div>
<br>
<br>
<br>
<br>
    <h3>Pesquisa de todas as pessoas no sistema</h3>
    <input type="file" id="upload" accept=".xls,.xlsx" />
    <label for="upload" class="upload-label">Selecionar arquivo Excel</label>
    <p id="file-name" style="font-style: italic; color: #555;"></p>
    <br>
    <p id="count">Total de pessoas: 0</p>
    <div id="department-filter">
        <button id="toggle-filter-btn" style="padding: 10px 15px; font-size: 16px; border: none; border-radius: 5px; background-color: #555; color: white; cursor: pointer; display: flex; align-items: center; gap: 5px;">
            <i class="fas fa-filter"></i>
            Filtrar por Departamento
        </button>
        <div id="department-checkboxes-container" class="hidden">
            <label style="margin-bottom: 10px; cursor: pointer;">
                <input type="checkbox" id="toggle-all-checkboxes"> Marcar Todos/Desmarcar Todos
            </label>
        </div>
    </div>
    <br>
    <!-- Cont√™iner para o campo de pesquisa e o bot√£o de limpar -->
    <div class="relative w-full max-w-lg flex items-center space-x-2">
        <input type="text" id="search" placeholder="üîç Pesquisar..." class="search-input" />
        <button id="clear-search-btn" class="hidden px-4 py-2 rounded-full bg-red-500 hover:bg-red-600 text-white text-sm focus:outline-none transition-all duration-200">
            Apagar
        </button>
    </div>
    <ul id="list"></ul>
    <script>
        const uploadInput = document.getElementById('upload');
        const searchInput = document.getElementById('search');
        const clearSearchBtn = document.getElementById('clear-search-btn');
        const list = document.getElementById('list');
        let allItems = {};
        let departmentCheckboxes = {};
        const departmentFilterDiv = document.getElementById('department-filter');
        const toggleAllCheckbox = document.getElementById('toggle-all-checkboxes');
        const toggleFilterBtn = document.getElementById('toggle-filter-btn');
        const checkboxesContainer = document.getElementById('department-checkboxes-container');

        // Fun√ß√£o para carregar dados do cache ao iniciar a p√°gina
        function loadFromCache() {
            const cachedData = localStorage.getItem('excelData');
            if (cachedData) {
                try {
                    const parsedData = JSON.parse(cachedData);
                    allItems = parsedData.items;
                    const originalDepartments = parsedData.depts;
                    document.getElementById('file-name').textContent = 'Dados carregados do cache.';
                    
                    renderDepartmentFilters(originalDepartments);

                    const toggleAllCheckboxElement = document.getElementById('toggle-all-checkboxes');
                    if (toggleAllCheckboxElement && Object.keys(originalDepartments).length > 0) {
                        toggleAllCheckboxElement.checked = true;
                    }

                    filterAndRenderList();
                } catch (e) {
                    console.error("Erro ao carregar dados do cache:", e);
                    localStorage.removeItem('excelData');
                }
            }
        }

        // Fun√ß√£o para salvar dados no cache
        function saveToCache() {
            const dataToCache = {
                items: allItems,
                depts: Object.values(departmentCheckboxes).reduce((acc, dept) => {
                    acc[dept] = dept;
                    return acc;
                }, {})
            };
            localStorage.setItem('excelData', JSON.stringify(dataToCache));
        }

        uploadInput.addEventListener('change', async (e) => {
            const file = e.target.files[0];
            document.getElementById('file-name').textContent = `üìÇ Arquivo selecionado: ${file.name}`;
            if (!file) return;

            const data = await file.arrayBuffer();
            const workbook = XLSX.read(data, { type: 'array' });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            // Utiliza a fun√ß√£o sheet_to_json com a op√ß√£o 'raw' para obter valores brutos
            const json = XLSX.utils.sheet_to_json(worksheet, { header: 1, raw: false });

            const departments = {};
            const originalDepartments = {};

            // Itera sobre o array para pegar a linha correta
            json.forEach(row => {
                // Mapeamento das colunas:
                // Coluna A -> ID
                // Coluna B -> Nome
                // Coluna C -> Sobrenome
                // Coluna E -> Departamento
                // Coluna H -> CPF (Assumido)
                // Coluna I -> Telefone (Assumido)
                // Coluna J -> E-mail (Assumido)
                const id = row[0] ? row[0].toString().trim() : "N/A";
                const nome = row[1] ? row[1].trim() : "N/A";
                const sobrenome = row[2] ? row[2].trim() : "N/A";
                const department = row[4] && row[4].trim() ? row[4].trim() : "Portaria Virtual";
                const cpf = row[7] ? row[7].toString().trim() : "N/A";
                const telefone = row[8] ? row[8].toString().trim() : "N/A";
                const email = row[9] ? row[9].toString().trim() : "N/A";

                // Valida se os dados essenciais existem
                if (!id || !nome || !sobrenome || !department) return;

                if (!departments[department]) {
                    departments[department] = new Set();
                    originalDepartments[department] = department;
                }
                
                // Cria um elemento HTML para cada item com √≠cones
                const itemHtml = `
                    <div class="flex flex-wrap space-x-4">
                        <span class="flex items-center space-x-1">
                            <i class="fas fa-user text-blue-500"></i>
                            <span>${nome} ${sobrenome}</span>
                        </span>
                        <span class="flex items-center space-x-1">
                            <i class="fas fa-id-badge text-gray-500"></i>
                            <span>ID: ${id}</span>
                        </span>
                        ${cpf !== "N/A" ? `
                        <span class="flex items-center space-x-1">
                            <i class="fas fa-address-card text-green-500"></i>
                            <span>CPF: ${cpf}</span>
                        </span>` : ''}
                        ${telefone !== "N/A" ? `
                        <span class="flex items-center space-x-1">
                            <i class="fas fa-phone text-purple-500"></i>
                            <span>${telefone}</span>
                        </span>` : ''}
                        ${email !== "N/A" ? `
                        <span class="flex items-center space-x-1">
                            <i class="fas fa-envelope text-red-500"></i>
                            <span>${email}</span>
                        </span>` : ''}
                    </div>
                `;

                departments[department].add(itemHtml);
            });

            const departmentsArray = {};
            for (const dept in departments) {
                departmentsArray[dept] = Array.from(departments[dept]);
            }

            allItems = departmentsArray;
            renderDepartmentFilters(originalDepartments);
            
            // Salva os dados no cache ap√≥s o upload
            saveToCache();

            const toggleAllCheckboxElement = document.getElementById('toggle-all-checkboxes');
            if (toggleAllCheckboxElement && Object.keys(originalDepartments).length > 0) {
                toggleAllCheckboxElement.checked = true;
            }

            filterAndRenderList();
        });

        searchInput.addEventListener('input', () => {
            if (searchInput.value.length > 0) {
                clearSearchBtn.classList.remove('hidden');
            } else {
                clearSearchBtn.classList.add('hidden');
            }
            filterAndRenderList();
        });

        // Adiciona um evento de clique para o novo bot√£o de limpar
        clearSearchBtn.addEventListener('click', () => {
            searchInput.value = ''; // Limpa o valor do input
            clearSearchBtn.classList.add('hidden'); // Esconde o bot√£o novamente
            filterAndRenderList(); // Atualiza a lista para mostrar todos os resultados
        });

        function renderList(items) {
            list.innerHTML = '';
            items.forEach(item => {
                const li = document.createElement('li');
                li.innerHTML = item; // Use innerHTML para renderizar o HTML com os √≠cones
                list.appendChild(li);
            });

            document.getElementById('count').textContent = `Total de pessoas: ${items.length}`;
        }

        function renderGroupedList(groups) {
            list.innerHTML = '';
            let total = 0;

            Object.keys(groups).sort().forEach(dept => {
                const deptHeader = document.createElement('li');
                deptHeader.innerHTML = `<strong>${dept}</strong>`;
                deptHeader.style.marginTop = '15px';
                list.appendChild(deptHeader);

                groups[dept].forEach(item => {
                    const li = document.createElement('li');
                    li.innerHTML = item; // Use innerHTML para renderizar o HTML com os √≠cones
                    list.appendChild(li);
                    total++;
                });
            });

            document.getElementById('count').textContent = `Total de pessoas: ${total}`;
        }

        function renderDepartmentFilters(depts) {
            // Limpa o conte√∫do da div de checkboxes antes de adicionar os novos
            checkboxesContainer.innerHTML = '';

            const toggleAllLabel = document.createElement('label');
            const toggleCheckbox = document.createElement('input');
            toggleCheckbox.type = 'checkbox';
            toggleCheckbox.id = 'toggle-all-checkboxes';
            toggleAllLabel.appendChild(toggleCheckbox);
            toggleAllLabel.appendChild(document.createTextNode(' Marcar Todos/Desmarcar Todos'));
            toggleAllLabel.style.marginBottom = '10px';
            toggleAllLabel.style.cursor = 'pointer';
            checkboxesContainer.appendChild(toggleAllLabel);

            toggleCheckbox.addEventListener('change', toggleAllDepartments);

            departmentCheckboxes = {};

            Object.keys(depts).sort().forEach(dept => {
                const count = allItems[dept] ? allItems[dept].length : 0;
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.id = `dept-${dept.replace(/\s+/g, '-')}`;
                checkbox.value = dept;
                checkbox.checked = true;
                checkbox.addEventListener('change', filterAndRenderList);

                const label = document.createElement('label');
                label.htmlFor = checkbox.id;
                label.textContent = `${dept} (${count})`;
                label.style.marginLeft = '0px';
                label.style.marginRight = '0px';

                const div = document.createElement('div');
                div.appendChild(checkbox);
                div.appendChild(label);
                checkboxesContainer.appendChild(div);
                departmentCheckboxes[checkbox.id] = dept;
            });
        }

        function toggleAllDepartments() {
            const shouldCheck = this.checked;
            Object.keys(departmentCheckboxes).forEach(checkboxId => {
                const checkbox = document.getElementById(checkboxId);
                if (checkbox) {
                    checkbox.checked = shouldCheck;
                }
            });
            filterAndRenderList();
        }

        function filterAndRenderList() {
            const search = searchInput.value.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
            const searchWords = search.split(/\s+/).filter(Boolean);
            const visibleDepartments = new Set();

            Object.keys(departmentCheckboxes).forEach(checkboxId => {
                const checkbox = document.getElementById(checkboxId);
                if (checkbox && checkbox.checked) {
                    visibleDepartments.add(departmentCheckboxes[checkboxId]);
                }
            });

            const filteredGroups = {};

            Object.keys(allItems).forEach(dept => {
                if (visibleDepartments.has(dept)) {
                    const filtered = allItems[dept].filter(item => {
                        const itemWords = item.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
                        return searchWords.every(word => itemWords.includes(word));
                    });

                    if (filtered.length > 0) {
                        filteredGroups[dept] = filtered;
                    }
                }
            });

            renderGroupedList(filteredGroups);
        }

        // Evento para o bot√£o de abrir/fechar os filtros
        toggleFilterBtn.addEventListener('click', () => {
            checkboxesContainer.classList.toggle('hidden');
        });
        
        // Carrega os dados do cache ao iniciar a p√°gina
        loadFromCache();
    </script>
</body>
</html>


